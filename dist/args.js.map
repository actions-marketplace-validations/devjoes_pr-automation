{"version":3,"sources":["../src/args.js"],"names":["logger","getArg","name","opts","defaultIfMissing","process","env","replace","toUpperCase","core","getInput","trim","args","token","required","autoCloseLabel","autoMergeLabel","warnClosingAfterSecs","undefined","autoCloseAfterWarnSecs","closingSoonComment","closingSoonLabel","deleteOnClose","toLowerCase","deleteOnMerge","branchBlackListLowerCase","split","map","s","filter","length","obfuscate","str","padEnd","Math","abs","info","JSON","stringify","fail","msg","error","setFailed"],"mappings":"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","sourcesContent":["import * as core from '@actions/core';\nimport process from 'process';\nimport parseDuration, { ms } from 'parse-duration';\n\nexport default logger => {\n  const getArg = (name, opts, defaultIfMissing) =>\n    (\n      process.env['PR_AUTOMATION_' + name.replace(/([A-Z])/g, '_$1').toUpperCase()] ||\n      core.getInput(name, opts) ||\n      defaultIfMissing ||\n      ''\n    ).trim();\n  const args = {\n    token: getArg('token', { required: true }),\n    autoCloseLabel: getArg('autoCloseLabel'),\n    autoMergeLabel: getArg('autoMergeLabel'),\n    warnClosingAfterSecs: parseDuration(getArg('warnClosingAfter', undefined, '0')) / 1000,\n    autoCloseAfterWarnSecs: parseDuration(getArg('autoCloseAfterWarn', undefined, '0')) / 1000,\n    closingSoonComment: getArg('closingSoonComment'),\n    closingSoonLabel: getArg('closingSoonLabel'),\n    deleteOnClose: getArg('deleteOnClose').toLowerCase() == 'true',\n    deleteOnMerge: getArg('deleteOnMerge').toLowerCase() == 'true',\n    branchBlackListLowerCase: (getArg('branchBlackList') || 'master')\n      .split(/\\s?\\,\\s?/g)\n      .map(s => s.trim().toLowerCase())\n      .filter(s => s.length > 0),\n  };\n\n  const obfuscate = str =>\n    str.length === 0 ? '' : str[0].padEnd(Math.abs(str.length - 2), '*') + str[str.length - 1];\n\n  logger.info('Starting with the arguments:\\n' + JSON.stringify({\n    ...args,\n    token: obfuscate(args.token)\n  }, null, 2));\n\n  const fail = msg => {\n    logger.error(msg);\n    core.setFailed(msg);\n  };\n\n  if (!args.token || args.token.trim().length === 0) {\n    fail('token is required');\n    return;\n  }\n  if (\n    args.autoCloseLabel &&\n    args.autoCloseLabel !== '' &&\n    (args.warnClosingAfterSecs === 0 ||\n      args.autoCloseAfterWarnSecs === 0 ||\n      !args.closingSoonComment ||\n      !args.closingSoonLabel)\n  ) {\n    fail(\n      'If autoCloseLabel is specified then warnClosingAfter, autoCloseAfterWarn, closingSoonComment and closingSoonLabel must also be specified',\n    );\n    return;\n  }\n  return args;\n};\n"],"file":"args.js"}